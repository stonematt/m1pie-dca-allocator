[
  {
    "title": "Parse Portfolio Screenshot via GPT-4 Vision",
    "description": "Users can upload an image of an M1 pie, which the system parses into structured portfolio data.",
    "status": "complete",
    "acceptance_criteria": [
      "Users can upload .png, .jpg, or .jpeg images.",
      "The image is parsed into JSON with pie/ticker types and values.",
      "Data is cached and re-parseable."
    ]
  },
  {
    "title": "Persist Parsed Portfolios",
    "description": "Parsed data is saved to JSON and reloaded in the UI.",
    "status": "complete",
    "acceptance_criteria": [
      "Portfolios are stored in a data/ directory.",
      "User can select from saved portfolios."
    ]
  },
  {
    "title": "Display Portfolio Summary",
    "description": "Render loaded portfolio with ticker/pie breakdowns and weights.",
    "status": "complete",
    "acceptance_criteria": [
      "Portfolio shows name, total value, and child breakdowns.",
      "Includes pie/ticker classification."
    ]
  },
  {
    "title": "Adjust Allocation with DCA Strategy",
    "description": "User can allocate new capital using a DCA model across existing and new tickers.",
    "status": "complete",
    "acceptance_criteria": [
      "User inputs new funds, percent to new tickers, and ticker count.",
      "Adjusted portfolio is calculated and saved."
    ]
  },
  {
    "title": "Log Level Control in UI",
    "description": "Users can set application log level via Streamlit.",
    "status": "complete",
    "acceptance_criteria": [
      "Log level dropdown available.",
      "Log output respects selected level."
    ]
  },
  {
    "title": "Display DCA Allocation Output",
    "description": "Allocation results shown in a table including capital allocated per position.",
    "status": "complete",
    "acceptance_criteria": [
      "Table includes capital allocated, target values, and weights.",
      "All monetary values are currency-formatted."
    ]
  },
  {
    "title": "Visualize Allocation Changes",
    "description": "Show pie charts of original vs adjusted allocations.",
    "status": "complete",
    "acceptance_criteria": [
      "Two vertically stacked pies.",
      "Labels reflect tickers/pies."
    ]
  },
  {
    "title": "Improve Pie Chart Value Handling",
    "description": "Address decompression bomb error and switch to Plotly pies.",
    "status": "complete",
    "acceptance_criteria": [
      "Uses Plotly.",
      "Charts render reliably and scale visually."
    ]
  },
  {
    "title": "Robust Ticker/Pie Classification",
    "description": "Better logic for distinguishing pies vs tickers, using icon cues and capital casing.",
    "status": "complete",
    "acceptance_criteria": [
      "Vision prompt updated.",
      "Parsers recognize pie icon vs logo."
    ]
  },
  {
    "title": "Clear Adjusted State on Load",
    "description": "When user loads a new portfolio, adjusted view is cleared.",
    "status": "complete",
    "acceptance_criteria": [
      "Adjusted view doesn’t persist after switching portfolios."
    ]
  },
  {
    "title": "Delete Portfolio Cleanly",
    "description": "Deleting a portfolio also clears UI if it’s the active portfolio.",
    "status": "complete",
    "acceptance_criteria": [
      "Removes session state and hides display for deleted."
    ]
  },
  {
    "title": "Replace Portfolio on Upload",
    "description": "When an image is parsed, replace current portfolio content instead of merging.",
    "status": "not_started",
    "acceptance_criteria": [
      "Upload replaces portfolio in session and on disk.",
      "Old data is discarded."
    ]
  },
  {
    "title": "Improve UX and visualization to optimize screen real estate",
    "description": "Refine layout and UI elements to make better use of vertical and horizontal space, ensuring clarity and responsiveness.",
    "status": "not_started",
    "acceptance_criteria": [
      "Slider and inputs grouped to reduce vertical footprint.",
      "Tables and charts are placed side by side when possible.",
      "Use of `st.dataframe` and currency formatting applied.",
      "Whitespace and alignment optimized for clarity."
    ]
  },
  {
    "title": "Use Cookies for Portfolio Persistence",
    "description": "Persist current portfolio using real browser cookies (via extra-streamlit-components) instead of server-side storage.",
    "status": "complete",
    "acceptance_criteria": [
      "Current portfolio is automatically saved to a browser cookie using extra-streamlit-components.",
      "On app reload, portfolio is restored from the cookie if present.",
      "Portfolios are compressed using zlib + base64 to fit within typical cookie size limits (~4KB).",
      "If data exceeds cookie limits, fallback gracefully with a user-visible warning.",
      "Data is stored only client-side, ensuring user privacy and no server-side persistence."
    ]
  },
  {
    "title": "Add Support Link for Donations",
    "description": "Allow users to support development via a donation link (e.g., Buy Me a Coffee or Ko-fi).",
    "status": "not_started",
    "acceptance_criteria": [
      "A support/donation button or link is visible in the sidebar or footer.",
      "Clicking the link opens a new tab to a configured donation platform.",
      "The integration uses a privacy-respecting service (e.g., Buy Me a Coffee, Ko-fi, Stripe Tip Jar).",
      "The link or handle is configurable in code or via environment variable."
    ]
  },
  {
    "title": "Visualize DCA Impact with Sankey Diagram",
    "description": "Use a Sankey diagram to show how new capital from DCA input is distributed from source to pies and tickers. This enables users to intuitively grasp the allocation path and resulting impact.",
    "status": "not_started",
    "acceptance_criteria": [
      "Sankey shows flow from new capital → pies/tickers.",
      "Width of flow lines corresponds to allocation amount.",
      "Nodes are labeled with ticker/pie names and dollar values.",
      "Matches calculated DCA outputs exactly.",
      "Displays side-by-side with current pie chart (toggle or tab)."
    ]
  },
  {
    "title": "Visualize Portfolio Structure as Sankey Diagram",
    "description": "Add a new visualization option that uses a Sankey diagram to depict the nested pie → ticker structure, improving visibility into the full recursive allocation hierarchy. There is currently no visualization for this structure.",
    "status": "in_progress",
    "acceptance_criteria": [
      "Root node is the top-level pie (e.g., \"main\").",
      "Intermediate nodes represent nested pies.",
      "Leaf nodes represent tickers.",
      "Any pie may contain a mix of tickers or pies.",
      "Flow width proportional to value held.",
      "Each node includes the name (no hover required).",
      "Mouseover or tap interaction shows ticker symbol and value."
    ]
  },
  {
    "title": "Warn if OpenAI API Key is Missing",
    "description": "Ensure the application gracefully handles the case where the OpenAI key is not set in `.streamlit/secrets.toml`. Display a user-facing warning and disable parsing functionality.",
    "status": "not_started",
    "acceptance_criteria": [
      "On app start, check for presence of `secrets[\"openai\"][\"api_key\"]`.",
      "If missing, show a clear warning in the UI.",
      "Disable image parsing components (e.g., upload/parse button).",
      "Warning includes instructions on how to fix."
    ]
  },
  {
    "title": "Add Button to Generate Example Portfolio",
    "description": "Add a button to the sidebar to generate a predefined 3-level nested test portfolio for debugging, development, and Sankey diagram validation.",
    "status": "complete",
    "acceptance_criteria": [
      "A button labeled \"make example portfolio\" appears in the sidebar UI.",
      "When clicked, replaces the current portfolio in session state with the generated test portfolio.",
      "Generated portfolio includes 3-level hierarchy (pie → pie → ticker).",
      "New portfolio appears as the loaded portfolio with name set to \"example\".",
      "Can be used as input to Sankey diagram logic.",
      "Safe to call multiple times (replaces previous portfolio cleanly).",
      "Logged as a system-generated portfolio creation event.",
      "Uses existing portfolio management functions so it is saved and switchable like any user-created portfolio."
    ]
  }
]
